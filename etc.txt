-----------------------------------Assignment 2

-- 1. Create database
CREATE DATABASE PCCODE_101;
USE PCCODE_101;

-- 2. Create Students table
CREATE TABLE Students_101 (
    PRN INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50),
    MiddleName VARCHAR(50),
    Year INT,
    Email VARCHAR(100),
    Age INT,
    Department VARCHAR(100)
);

-- 3. Insert records into Students table
INSERT INTO Students_101 VALUES
(101, 'John', 'Doe', 'A', 2, 'john.doe@example.com', 20, 'Computer Science'),
(102, 'Jane', 'Smith', 'B', 1, 'jane.smith@example.com', 19, 'Electronics'),
(103, 'Alice', 'Johnson', NULL, 3, 'alice.johnson@example.com', 21, 'Mechanical'),
(104, 'brod', 'stud', 'b', 2, 'Brod.a@example.com', 20, 'Electronics');

-- 4. Retrieve all records from the Students table
SELECT * FROM Students_101;

-- 5. Update the Year of the student with PRN 102 to 2
UPDATE Students_101 SET Year = 2 WHERE PRN = 102;

-- 6. Delete the record of the student whose PRN is 103
DELETE FROM Students_101 WHERE PRN = 103;

-- 7. Add a new column PhoneNumber of type VARCHAR(15) to the Students table
ALTER TABLE Students_101 ADD PhoneNumber VARCHAR(15);

-- 8. Drop the PhoneNumber column from the Students table
ALTER TABLE Students_101 DROP COLUMN PhoneNumber;

-- 9. Retrieve all distinct departments from the Students table
SELECT DISTINCT Department FROM Students_101;

-- 10. Find number of distinct departments from the Students table
SELECT COUNT(DISTINCT Department) FROM Students_101;

-- 11. Retrieve the distinct years in which students are enrolled
SELECT DISTINCT Year FROM Students_101;

-- 12. Retrieve distinct ages of students in the "Computer Science" department
SELECT DISTINCT Age FROM Students_101 WHERE Department = 'Computer Science';

-- 13. Retrieve distinct first names of students whose age is less than 21
SELECT DISTINCT FirstName FROM Students_101 WHERE Age < 21;

-- 14. Retrieve the full details of students who are older than 20 years
SELECT * FROM Students_101 WHERE Age > 20;

-- 15. Retrieve all students enrolled in their third year
SELECT * FROM Students_101 WHERE Year = 3;

-- 16. Display the first and last names of students along with their department, but only for students whose PRN is greater than 101
SELECT FirstName, LastName, Department FROM Students_101 WHERE PRN > 101;

-- 17. Fetch the first names and email addresses of all students in the "Electronics" department
SELECT FirstName, Email FROM Students_101 WHERE Department = 'Electronics';

-- 18. Fetch details of students in the "Computer Science" department who are older than 19
SELECT * FROM Students_101 
WHERE Department = 'Computer Science' AND Age > 19;

-- 19. Remove all records from the students table without deleting the structure of the table
TRUNCATE TABLE Students_101;

-- 20. Delete the students table from the database
DROP TABLE Students_101;

-- 21. Drop the students table (same as 20)
DROP TABLE Students_101;

-----------------------------------Assignment 3

-- 1. Create database
CREATE DATABASE StudentManagement;
USE StudentManagement;

-- 2. Create Courses table
CREATE TABLE Courses (
    CourseID INT PRIMARY KEY NOT NULL,
    CourseName VARCHAR(100) NOT NULL UNIQUE,
    Credits INT DEFAULT 3
);

-- 2. Create Students table
CREATE TABLE Students (
    StudentID INT PRIMARY KEY NOT NULL,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50),
    Email VARCHAR(100) UNIQUE,
    DOB DATE NOT NULL,
    CourseID INT,
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

-- 3. Insert records into Courses table
INSERT INTO Courses VALUES
(1, 'Computer Science', 3),
(2, 'Mathematics', 4),
(3, 'Physics', 3);

-- 3. Insert records into Students table
INSERT INTO Students VALUES
(101, 'John', 'Doe', 'john@example.com', '2000-05-15', 1),
(102, 'Jane', 'Smith', 'jane@example.com', '1999-08-20', 2),
(103, 'Alice', 'Johnson', 'alice@example.com', '2001-02-10', 3),
(104, 'Bob', 'Brown', 'bob@example.com', '2002-11-30', NULL);

-- 4.1 Test NOT NULL constraint by inserting NULL into FirstName
INSERT INTO Students (StudentID, FirstName, Email, DOB) 
VALUES (105, NULL, 'test1@example.com', '2000-01-01');

-- 4.2 Test UNIQUE constraint by inserting duplicate email
INSERT INTO Students VALUES (105, 'Tom', 'Wilson', 'john@example.com', '2000-01-01', 1);

-- 4.3 Test FOREIGN KEY constraint by inserting invalid CourseID
INSERT INTO Students VALUES (105, 'Tom', 'Wilson', 'tom@example.com', '2000-01-01', 99);

-- 5.1 Display names of students who were born after the year 2000
SELECT FirstName, LastName FROM Students 
WHERE DOB > '2000-12-31';

-- 5.2 Update the course credits for "Computer Science" to 4
UPDATE Courses SET Credits = 4 
WHERE CourseName = 'Computer Science';

-- 5.3 Delete a student record whose email is 'test@example.com'
DELETE FROM Students WHERE Email = 'test@example.com';

-- 5.4 Find students who are not enrolled in any course
SELECT * FROM Students WHERE CourseID IS NULL;

-- 5.5 Test the UNIQUE constraint by inserting a duplicate email
INSERT INTO Students VALUES (105, 'Tom', 'Wilson', 'john@example.com', '2000-01-01', 1);

-- 5.6 Test the FOREIGN KEY constraint by inserting a student with a CourseID that doesn't exist
INSERT INTO Students VALUES (105, 'Tom', 'Wilson', 'tom@example.com', '2000-01-01', 99);

-----------------------------------Assignment 4

-- Create database and tables
CREATE DATABASE ECommerce;
USE ECommerce;

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50),
    email VARCHAR(100),
    city VARCHAR(50),
    age INT
);

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    name VARCHAR(50),
    category VARCHAR(50),
    price DECIMAL(10,2),
    stock INT
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10,2),
    status VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Order_Items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    subtotal DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Insert sample data
INSERT INTO Customers VALUES
(1, 'John Doe', 'john@example.com', 'New York', 35),
(2, 'Jane Smith', 'jane@example.com', 'Los Angeles', 28),
(3, 'Alice Johnson', 'alice@example.com', 'Chicago', 42),
(4, 'Bob Brown', 'bob@example.com', 'New York', 25),
(5, 'Charlie Davis', 'charlie@example.com', 'Boston', 30);

INSERT INTO Products VALUES
(101, 'Smart Phone', 'Electronics', 599.99, 50),
(102, 'Laptop', 'Electronics', 999.99, 25),
(103, 'T-Shirt', 'Clothing', 19.99, 100),
(104, 'Coffee Mug', 'Home', 9.99, 200),
(105, 'Wireless Earbuds', 'Electronics', 79.99, 75);

INSERT INTO Orders VALUES
(1001, 1, '2024-01-15', 619.98, 'Completed'),
(1002, 2, '2024-02-20', 39.98, 'Completed'),
(1003, 3, '2024-03-10', 1079.98, 'Pending'),
(1004, 1, '2024-04-05', 29.97, 'Completed'),
(1005, 4, '2024-04-18', 999.99, 'Shipped');

INSERT INTO Order_Items VALUES
(1, 1001, 101, 1, 599.99),
(2, 1001, 104, 2, 19.98),
(3, 1002, 103, 2, 39.98),
(4, 1002, 1007, 6, 29.94),
(5, 1003, 1006, 3, 149.97),
(6, 1004, 104, 3, 29.97),
(7, 1005, 1005, 1, 99.99),
(8, 1006, 1003, 5, 99.95),
(9, 1006, 1006, 2, 99.98);

-- 1. Find the total amount spent by customer ID 3
SELECT SUM(total_amount) FROM Orders WHERE customer_id = 3;

-- 2. Find the total revenue generated from all orders
SELECT SUM(total_amount) FROM Orders;

-- 3. Calculate the stock value (price Ã— stock) for each product
SELECT product_id, name, price * stock AS stock_value 
FROM Products;

-- 4. Retrieve customers who are above 30 years old and live in "New York"
SELECT * FROM Customers 
WHERE age > 30 AND city = 'New York';

-- 5. Find customers who either live in "Los Angeles" or have placed an order worth more than $500
SELECT DISTINCT c.* 
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE c.city = 'Los Angeles' OR o.total_amount > 500;

-- 6. List products that are in stock but cost less than $50
SELECT * FROM Products 
WHERE stock > 0 AND price < 50;

-- 7. Find Products That Have Less Than 5 Items in Stock
SELECT * FROM Products WHERE stock < 5;

-- 8. Find orders that are not completed (status is not 'Completed')
SELECT * FROM Orders WHERE status != 'Completed';

-- 9. Find products that are out of stock or belong to the "Electronics" category
SELECT * FROM Products 
WHERE stock = 0 OR category = 'Electronics';

-- 10. List all email addresses that belong to Gmail
SELECT * FROM Customers 
WHERE email LIKE '%@gmail.%';

-- 11. Find product names containing the word "Phone"
SELECT * FROM Products 
WHERE name LIKE '%Phone%';

-- 12. Find customers whose names have exactly 5 characters
SELECT * FROM Customers 
WHERE LENGTH(name) = 5;

-- 13. Find Products That Have "Laptop" or "Tablet" in Their Name
SELECT * FROM Products 
WHERE name LIKE '%Laptop%' OR name LIKE '%Tablet%';

-- 14. Retrieve orders placed in the year 2024
SELECT * FROM Orders 
WHERE YEAR(order_date) = 2024;

-- 15. Find customers who live in "New York", "Los Angeles", or "Chicago"
SELECT * FROM Customers 
WHERE city IN ('New York', 'Los Angeles', 'Chicago');

-- 16. List products that do not belong to the 'Electronics' or 'Clothing' categories
SELECT * FROM Products 
WHERE category NOT IN ('Electronics', 'Clothing');

-- 17. Find orders placed by customers with IDs 1, 3, or 5
SELECT * FROM Orders 
WHERE customer_id IN (1, 3, 5);

-- 18. Find customers who have not placed any orders
SELECT c.* FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;

-- 19. Show All Orders Placed in the Last 30 Days
SELECT * FROM Orders 
WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);

-- 20. Find Orders Where the Total Amount is an Exact Multiple of 100
SELECT * FROM Orders 
WHERE total_amount % 100 = 0;

-----------------------------------Assignment 5

-- Create database and tables
CREATE DATABASE BankingSystem;
USE BankingSystem;

CREATE TABLE Branches (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(100),
    city VARCHAR(100)
);

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    dob DATE,
    city VARCHAR(100),
    account_type VARCHAR(50)
);

CREATE TABLE Accounts (
    account_id INT PRIMARY KEY,
    customer_id INT,
    balance DECIMAL(15,2),
    account_type VARCHAR(50),
    branch_id INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (branch_id) REFERENCES Branches(branch_id)
);

CREATE TABLE Transactions (
    transaction_id INT PRIMARY KEY,
    account_id INT,
    amount DECIMAL(15,2),
    transaction_type VARCHAR(50),
    transaction_date DATE,
    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
    loan_id INT PRIMARY KEY,
    customer_id INT,
    amount DECIMAL(15,2),
    loan_type VARCHAR(50),
    status VARCHAR(50),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Insert sample data
INSERT INTO Branches VALUES
(1, 'Main Branch', 'New York'),
(2, 'Downtown Branch', 'Los Angeles'),
(3, 'Central Branch', 'Chicago');

INSERT INTO Customers VALUES
(101, 'John Doe', '1980-05-15', 'New York', 'Savings'),
(102, 'Jane Smith', '1990-08-20', 'Los Angeles', 'Checking'),
(103, 'Alice Johnson', '1975-02-10', 'Chicago', 'Savings'),
(104, 'Bob Brown', '1988-11-30', 'New York', 'Checking'),
(105, 'Charlie Davis', '1995-04-25', 'Boston', 'Savings');

INSERT INTO Accounts VALUES
(1001, 101, 50000.00, 'Savings', 1),
(1002, 102, 75000.00, 'Checking', 2),
(1003, 103, 120000.00, 'Savings', 3),
(1004, 104, 15000.00, 'Checking', 1),
(1005, 101, 30000.00, 'Checking', 2),
(1006, 105, 20000.00, 'Savings', 3);

INSERT INTO Transactions VALUES
(5001, 1001, 5000.00, 'Deposit', '2024-01-15'),
(5002, 1002, 2000.00, 'Withdrawal', '2024-01-20'),
(5003, 1003, 10000.00, 'Deposit', '2024-02-05'),
(5004, 1001, 3000.00, 'Withdrawal', '2024-02-10'),
(5005, 1004, 1500.00, 'Deposit', '2024-03-01'),
(5006, 1002, 5000.00, 'Transfer', '2024-03-15'),
(5007, 1003, 2000.00, 'Withdrawal', '2024-04-01'),
(5008, 1005, 1000.00, 'Deposit', '2024-04-10'),
(5009, 1001, 4000.00, 'Deposit', '2024-04-15'),
(5010, 1004, 500.00, 'Withdrawal', '2024-04-20');

INSERT INTO Loans VALUES
(2001, 101, 250000.00, 'Home', 'Approved'),
(2002, 102, 50000.00, 'Car', 'Approved'),
(2003, 104, 10000.00, 'Personal', 'Pending'),
(2004, 103, 150000.00, 'Home', 'Approved'),
(2005, 105, 20000.00, 'Personal', 'Rejected');

-- 1. Retrieve the total balance for each account type
SELECT account_type, SUM(balance) AS total_balance
FROM Accounts
GROUP BY account_type;

-- 2. Count the number of accounts in each branch
SELECT b.branch_name, COUNT(a.account_id) AS account_count
FROM Branches b
LEFT JOIN Accounts a ON b.branch_id = a.branch_id
GROUP BY b.branch_name;

-- 3. Find the number of customers in each city
SELECT city, COUNT(customer_id) AS customer_count
FROM Customers
GROUP BY city;

-- 4. Show the number of loans approved per loan type
SELECT loan_type, COUNT(loan_id) AS approved_loans
FROM Loans
WHERE status = 'Approved'
GROUP BY loan_type;

-- 5. Find the total number of transactions for each transaction type
SELECT transaction_type, COUNT(transaction_id) AS transaction_count
FROM Transactions
GROUP BY transaction_type;

-- 6. Show the customers who do not have a loan
SELECT c.*
FROM Customers c
LEFT JOIN Loans l ON c.customer_id = l.customer_id
WHERE l.loan_id IS NULL;

-- 7. Retrieve customers who have accounts in more than one branch
SELECT c.customer_id, c.name
FROM Customers c
JOIN Accounts a ON c.customer_id = a.customer_id
GROUP BY c.customer_id, c.name
HAVING COUNT(DISTINCT a.branch_id) > 1;

-- 8. Find all accounts that have not had any deposits in the last 3 months
SELECT a.*
FROM Accounts a
WHERE a.account_id NOT IN (
    SELECT DISTINCT t.account_id
    FROM Transactions t
    WHERE t.transaction_type = 'Deposit'
    AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
);

-- 9. Display the account types where the total balance is below â‚¹25,000
SELECT account_type, SUM(balance) AS total_balance
FROM Accounts
GROUP BY account_type
HAVING total_balance < 25000;

-- 10. Find the total balance per account type where the balance is above â‚¹50,000
SELECT account_type, SUM(balance) AS total_balance
FROM Accounts
GROUP BY account_type
HAVING total_balance > 50000;

-- 11. Retrieve the count of transactions made on dates where more than 5 transactions occurred
SELECT transaction_date, COUNT(*) AS transaction_count
FROM Transactions
GROUP BY transaction_date
HAVING transaction_count > 5;

-- 12. Find the top 3 transaction days with the highest total transaction amount
SELECT transaction_date, SUM(amount) AS total_amount
FROM Transactions
GROUP BY transaction_date
ORDER BY total_amount DESC
LIMIT 3;

-- 13. Find customers who have a loan but no account in the bank
SELECT c.*
FROM Customers c
JOIN Loans l ON c.customer_id = l.customer_id
WHERE c.customer_id NOT IN (
    SELECT DISTINCT customer_id FROM Accounts
);

-----------------------------------Assignment 6

-- Create database and tables for E-commerce system
CREATE DATABASE ECommerceSystem;
USE ECommerceSystem;

-- Customers table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    city VARCHAR(100)
);

-- Sellers table
CREATE TABLE Sellers (
    seller_id INT PRIMARY KEY,
    seller_name VARCHAR(100),
    city VARCHAR(100)
);

-- Products table
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10,2)
);

-- Orders table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Order_Items table
CREATE TABLE Order_Items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    subtotal DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Insert sample data into Customers
INSERT INTO Customers VALUES
(1, 'John Doe', 'john@example.com', 'New York'),
(2, 'Jane Smith', 'jane@example.com', 'Los Angeles'),
(3, 'Alice Johnson', 'alice@example.com', 'Chicago'),
(4, 'Bob Brown', 'bob@example.com', 'Boston'),
(5, 'Charlie Davis', 'charlie@example.com', 'San Francisco');

-- Insert sample data into Sellers
INSERT INTO Sellers VALUES
(101, 'Tech Gadgets', 'New York'),
(102, 'Fashion Hub', 'Los Angeles'),
(103, 'Home Essentials', 'Chicago'),
(104, 'Electro World', 'Boston'),
(105, 'Book Palace', 'San Francisco');

-- Insert sample data into Products
INSERT INTO Products VALUES
(1001, 'Laptop', 'Electronics', 999.99),
(1002, 'Smartphone', 'Electronics', 699.99),
(1003, 'T-Shirt', 'Clothing', 19.99),
(1004, 'Coffee Mug', 'Home', 9.99),
(1005, 'Headphones', 'Electronics', 99.99),
(1006, 'Jeans', 'Clothing', 49.99),
(1007, 'Notebook', 'Stationery', 4.99);

-- Insert sample data into Orders
INSERT INTO Orders VALUES
(5001, 1, '2024-01-15', 1019.98),
(5002, 2, '2024-02-20', 69.98),
(5003, 3, '2024-03-10', 149.98),
(5004, 1, '2024-04-05', 29.97),
(5005, 4, '2024-04-18', 99.99),
(5006, 5, '2024-05-01', 199.98);

-- Insert sample data into Order_Items
INSERT INTO Order_Items VALUES
(1, 5001, 1001, 1, 999.99),
(2, 5001, 1004, 2, 19.98),
(3, 5002, 1003, 2, 39.98),
(4, 5002, 1007, 6, 29.94),
(5, 5003, 1006, 3, 149.97),
(6, 5004, 1004, 3, 29.97),
(7, 5005, 1005, 1, 99.99),
(8, 5006, 1003, 5, 99.95),
(9, 5006, 1006, 2, 99.98);

-- 1. Retrieve all customers along with their corresponding orders (including customers who haven't ordered)
SELECT c.*, o.order_id, o.order_date, o.total_amount
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id;

-- 2. List all orders along with the product names and their quantities
SELECT o.order_id, p.product_name, oi.quantity
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id
JOIN Products p ON oi.product_id = p.product_id;

-- 3. Find the total number of orders placed by each customer
SELECT c.customer_id, c.name, COUNT(o.order_id) AS order_count
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name;

-- 4. Find the total number of products available in each category
SELECT category, COUNT(*) AS product_count
FROM Products
GROUP BY category;

-- 5. Retrieve the order details, including customer name and total amount, for all orders placed in the last 30 days
SELECT o.order_id, c.name, o.total_amount
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);

-- 6. Retrieve the names of sellers who sell a specific product (e.g., "Laptop")
SELECT s.seller_name
FROM Sellers s
JOIN Products p ON s.city = 'New York' -- Assuming seller location determines availability
WHERE p.product_name = 'Laptop';

-- 7. Show all customers who have never placed an order
SELECT c.*
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;

-- 8. Retrieve details of orders where the total amount is greater than the average order total (using subquery)
SELECT *
FROM Orders
WHERE total_amount > (SELECT AVG(total_amount) FROM Orders);

-- 9. Find customers who have placed at least two orders
SELECT c.customer_id, c.name, COUNT(o.order_id) AS order_count
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name
HAVING order_count >= 2;

-- 10. Find the top 3 most ordered products based on quantity sold
SELECT p.product_name, SUM(oi.quantity) AS total_quantity
FROM Products p
JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY p.product_name
ORDER BY total_quantity DESC
LIMIT 3;

-- 11. Display the product names that are sold by multiple sellers
-- Assuming a Product_Sellers table exists
SELECT p.product_name
FROM Products p
JOIN Product_Sellers ps ON p.product_id = ps.product_id
GROUP BY p.product_name
HAVING COUNT(DISTINCT ps.seller_id) > 1;

-- 12. Retrieve sellers who have never sold any product
SELECT s.*
FROM Sellers s
LEFT JOIN Products p ON s.city = 'New York' -- Assuming some relationship
LEFT JOIN Order_Items oi ON p.product_id = oi.product_id
WHERE oi.order_item_id IS NULL;

-- 13. Find all products that have never been ordered
SELECT p.*
FROM Products p
LEFT JOIN Order_Items oi ON p.product_id = oi.product_id
WHERE oi.order_item_id IS NULL;

-- 14. Retrieve the names of customers who have placed the highest number of orders
SELECT c.name, COUNT(o.order_id) AS order_count
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.name
ORDER BY order_count DESC
LIMIT 1;

-- 15. Find all customers who have ordered more than 5 different products
SELECT c.customer_id, c.name
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN Order_Items oi ON o.order_id = oi.order_id
GROUP BY c.customer_id, c.name
HAVING COUNT(DISTINCT oi.product_id) > 5;

-- 16. Find products that are sold by at least two different sellers but have never been ordered
-- Assuming Product_Sellers table exists
SELECT p.*
FROM Products p
JOIN Product_Sellers ps ON p.product_id = ps.product_id
LEFT JOIN Order_Items oi ON p.product_id = oi.product_id
WHERE oi.order_item_id IS NULL
GROUP BY p.product_id
HAVING COUNT(DISTINCT ps.seller_id) > 1;

-- 17. Find the customer who has spent the most money overall
SELECT c.customer_id, c.name, SUM(o.total_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name
ORDER BY total_spent DESC
LIMIT 1;

-- 18. Find all customers who have either placed an order or live in the same city as a seller
SELECT DISTINCT c.*
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NOT NULL
UNION
SELECT DISTINCT c.*
FROM Customers c
JOIN Sellers s ON c.city = s.city;

-- 19. Retrieve all products that are either in stock with at least one seller or have been ordered at least once
-- Assuming Product_Sellers table for stock
SELECT DISTINCT p.*
FROM Products p
JOIN Product_Sellers ps ON p.product_id = ps.product_id
UNION
SELECT DISTINCT p.*
FROM Products p
JOIN Order_Items oi ON p.product_id = oi.product_id;

-- 20. Retrieve products that have been both ordered and are currently in stock
-- Assuming Product_Sellers table
SELECT DISTINCT p.*
FROM Products p
JOIN Product_Sellers ps ON p.product_id = ps.product_id
INTERSECT
SELECT DISTINCT p.*
FROM Products p
JOIN Order_Items oi ON p.product_id = oi.product_id;

-- 21. Find customers who have both placed an order and live in a city where a seller is located
SELECT DISTINCT c.*
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
INTERSECT
SELECT DISTINCT c.*
FROM Customers c
JOIN Sellers s ON c.city = s.city;

-- 22. Retrieve all customers who have placed at least one order in each year available in the database
-- This would require knowing the years in the database
-- A more general approach would be complex in standard SQL

-----------------------------------Assignment 7

-- Create database and tables
CREATE DATABASE UniversityDB;
USE UniversityDB;

CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY AUTO_INCREMENT,
    DeptName VARCHAR(100) UNIQUE NOT NULL,
    HOD VARCHAR(100) NOT NULL
);

CREATE TABLE Students (
    StudentID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Age INT CHECK (Age >= 18),
    DepartmentID INT,
    CGPA DECIMAL(3,2) CHECK (CGPA BETWEEN 0 AND 10),
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID) ON DELETE SET NULL
);

CREATE TABLE Courses (
    CourseID VARCHAR(10) PRIMARY KEY,
    CourseName VARCHAR(100) NOT NULL,
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID) ON DELETE CASCADE
);

CREATE TABLE Enrollments (
    EnrollmentID INT PRIMARY KEY AUTO_INCREMENT,
    StudentID INT,
    CourseID VARCHAR(10),
    Marks INT CHECK (Marks BETWEEN 0 AND 100),
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),
    UNIQUE (StudentID, CourseID)
);

-- Insert sample data
INSERT INTO Departments VALUES
(1, 'Computer Science', 'Dr. Smith'),
(2, 'Electrical Engineering', 'Dr. Johnson'),
(3, 'Mathematics', 'Dr. Williams'),
(4, 'Physics', 'Dr. Brown');

INSERT INTO Students VALUES
(101, 'Alice', 20, 1, 9.2),
(102, 'Bob', 21, 1, 8.5),
(103, 'Charlie', 22, 2, 7.8),
(104, 'David', 19, 3, 8.9),
(105, 'Eve', 20, 4, 9.5),
(106, 'Frank', 21, NULL, 7.2),
(107, 'Grace', 22, 1, 8.7),
(108, 'Henry', 20, 2, 6.9);

INSERT INTO Courses VALUES
('CS101', 'Introduction to Programming', 1),
('CS201', 'Data Structures', 1),
('EE101', 'Circuit Theory', 2),
('EE201', 'Digital Electronics', 2),
('MA101', 'Calculus I', 3),
('MA201', 'Linear Algebra', 3),
('PH101', 'Classical Mechanics', 4),
('PH201', 'Quantum Physics', 4);

INSERT INTO Enrollments VALUES
(1, 101, 'CS101', 85),
(2, 101, 'CS201', 90),
(3, 102, 'CS101', 78),
(4, 102, 'CS201', 82),
(5, 103, 'EE101', 75),
(6, 103, 'EE201', 88),
(7, 104, 'MA101', 92),
(8, 104, 'MA201', 85),
(9, 105, 'PH101', 95),
(10, 105, 'PH201', 90),
(11, 107, 'CS101', 89),
(12, 107, 'CS201', 91),
(13, 108, 'EE101', 65),
(14, 108, 'EE201', 70);

-- 1. Find students who have a CGPA higher than the university average CGPA
SELECT * FROM Students
WHERE CGPA > (SELECT AVG(CGPA) FROM Students);

-- 2. Find students who have never enrolled in any course
SELECT * FROM Students
WHERE StudentID NOT IN (SELECT DISTINCT StudentID FROM Enrollments);

-- 3. Get courses that have no students enrolled
SELECT * FROM Courses
WHERE CourseID NOT IN (SELECT DISTINCT CourseID FROM Enrollments);

-- 4. Get students enrolled in courses offered by the 'Computer Science' department
SELECT DISTINCT s.*
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID
JOIN Departments d ON c.DepartmentID = d.DepartmentID
WHERE d.DeptName = 'Computer Science';

-- 5. Find students who have the same age as the oldest student
SELECT * FROM Students
WHERE Age = (SELECT MAX(Age) FROM Students);

-- 6. Retrieve courses where at least one student scored more than 85 marks
SELECT DISTINCT c.*
FROM Courses c
JOIN Enrollments e ON c.CourseID = e.CourseID
WHERE e.Marks > 85;

-- 7. Find the highest CGPA in each department
SELECT d.DeptName, MAX(s.CGPA) AS max_cgpa
FROM Departments d
LEFT JOIN Students s ON d.DepartmentID = s.DepartmentID
GROUP BY d.DeptName;

-- 8. Get students who have enrolled in more than one course
SELECT s.*
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID
HAVING COUNT(*) > 1;

-- 9. Get the department with the most students enrolled
SELECT d.DeptName, COUNT(s.StudentID) AS student_count
FROM Departments d
LEFT JOIN Students s ON d.DepartmentID = s.DepartmentID
GROUP BY d.DeptName
ORDER BY student_count DESC
LIMIT 1;

-- 10. Find students who are not enrolled in any course
SELECT * FROM Students
WHERE StudentID NOT IN (SELECT DISTINCT StudentID FROM Enrollments);

-- 11. Retrieve students who scored below the average marks in their courses
SELECT s.*, e.CourseID, e.Marks
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
WHERE e.Marks < (SELECT AVG(Marks) FROM Enrollments);

-- 12. Find the department where the highest CGPA student belongs
SELECT d.DeptName
FROM Departments d
JOIN Students s ON d.DepartmentID = s.DepartmentID
WHERE s.CGPA = (SELECT MAX(CGPA) FROM Students);

-- 13. Find the department with the highest number of students enrolled
SELECT d.DeptName, COUNT(s.StudentID) AS student_count
FROM Departments d
LEFT JOIN Students s ON d.DepartmentID = s.DepartmentID
GROUP BY d.DeptName
ORDER BY student_count DESC
LIMIT 1;

-- 14. Get courses where the lowest score is higher than 70
SELECT c.CourseID, c.CourseName
FROM Courses c
JOIN Enrollments e ON c.CourseID = e.CourseID
GROUP BY c.CourseID, c.CourseName
HAVING MIN(e.Marks) > 70;

-- 15. Retrieve students who have the same CGPA as 'Alice'
SELECT * FROM Students
WHERE CGPA = (SELECT CGPA FROM Students WHERE Name = 'Alice');

-- 16. Get the course where the maximum number of students have enrolled
SELECT c.CourseID, c.CourseName, COUNT(e.EnrollmentID) AS enrollment_count
FROM Courses c
JOIN Enrollments e ON c.CourseID = e.CourseID
GROUP BY c.CourseID, c.CourseName
ORDER BY enrollment_count DESC
LIMIT 1;

-- 17. Find students who are enrolled in more than two courses
SELECT s.*
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID
HAVING COUNT(*) > 2;

-- 18. Retrieve students who have scored the highest marks in any course
SELECT c.CourseID, c.CourseName, s.Name, e.Marks
FROM Enrollments e
JOIN Students s ON e.StudentID = s.StudentID
JOIN Courses c ON e.CourseID = c.CourseID
WHERE (e.CourseID, e.Marks) IN (
    SELECT CourseID, MAX(Marks)
    FROM Enrollments
    GROUP BY CourseID
);

-- 19. Get the department with the lowest average CGPA
SELECT d.DeptName, AVG(s.CGPA) AS avg_cgpa
FROM Departments d
JOIN Students s ON d.DepartmentID = s.DepartmentID
GROUP BY d.DeptName
ORDER BY avg_cgpa ASC
LIMIT 1;

-- 20. Find the course in which the maximum number of students have failed (Marks < 40)
SELECT c.CourseID, c.CourseName, COUNT(*) AS failure_count
FROM Courses c
JOIN Enrollments e ON c.CourseID = e.CourseID
WHERE e.Marks < 40
GROUP BY c.CourseID, c.CourseName
ORDER BY failure_count DESC
LIMIT 1;

-----------------------------------Assignment 8

// 1. Create Database PCCOE
use PCCOE

// 2. Create Teachers and Students collections
db.createCollection("Teachers")
db.createCollection("Students")

// 3. Insert sample data into Teachers
db.Teachers.insertMany([
    {Thame: "Praveen", dno: 1, dname: "computer", experience: 8, salary: 15000, date_of_joining: new Date("2015-05-10")},
    {Thame: "Rahul", dno: 2, dname: "IT", experience: 5, salary: 12000, date_of_joining: new Date("2018-08-15")},
    {Thame: "Sneha", dno: 3, dname: "E&TC", experience: 10, salary: 18000, date_of_joining: new Date("2013-02-20")},
    {Thame: "Anil", dno: 1, dname: "computer", experience: 12, salary: 20000, date_of_joining: new Date("2011-11-05")},
    {Thame: "Priya", dno: 2, dname: "IT", experience: 3, salary: 9000, date_of_joining: new Date("2020-07-30")}
])

// Insert sample data into Students
db.Students.insertMany([
    {Shame: "Amit", roll_no: 1, class: "SY"},
    {Shame: "xyz", roll_no: 2, class: "TY"},
    {Shame: "Rohan", roll_no: 3, class: "FY"},
    {Shame: "Neha", roll_no: 4, class: "SY"}
])

// 4. Find information about all teachers
db.Teachers.find()

// 5. Find information about all teachers of computer department
db.Teachers.find({dname: "computer"})

// 6. Find information about all teachers of computer, IT, and e&TC department
db.Teachers.find({dname: {$in: ["computer", "IT", "E&TC"]}})

// 7. Find teachers of computer/IT/E&TC with salary >= 10000
db.Teachers.find({
    dname: {$in: ["computer", "IT", "E&TC"]},
    salary: {$gte: 10000}
})

// 8. Find students with roll_no=2 or Sname="xyz"
db.Students.find({
    $or: [
        {roll_no: 2},
        {Shame: "xyz"}
    ]
})

// 9. Update experience of teacher "Praveen" to 10 years (upsert if not exists)
db.Teachers.updateOne(
    {Thame: "Praveen"},
    {$set: {experience: 10}},
    {upsert: true}
)

// 10. Update department of all IT teachers to "COMP"
db.Teachers.updateMany(
    {dname: "IT"},
    {$set: {dname: "COMP"}}
)

// 11. Display teachers' names and experience only
db.Teachers.find({}, {Thame: 1, experience: 1, _id: 0})

// 12. Insert new teacher using save()
db.Teachers.save({
    Thame: "NewTeacher",
    dno: 4,
    dname: "Mechanical",
    experience: 7,
    salary: 13000,
    date_of_joining: new Date()
})

// 13. Change department of teacher "Praveen" to IT using save()
var praveen = db.Teachers.findOne({Thame: "Praveen"})
praveen.dname = "IT"
db.Teachers.save(praveen)

// 14. Delete all IT department teachers
db.Teachers.deleteMany({dname: "IT"})

// 15. Display first 3 teachers sorted by name (ascending) with pretty formatting
db.Teachers.find().sort({Thame: 1}).limit(3).pretty()

-----------------------------------Assignment 9

// 1. Insert sample data into zipcode collection
db.zipcode.insertMany([
    {"_id": "10280", "city": "NEW YORK", "state": "NY", "pop": 5574},
    {"_id": "10281", "city": "ALBANY", "state": "NY", "pop": 12000},
    {"_id": "10282", "city": "BUFFALO", "state": "NY", "pop": 8500},
    {"_id": "20280", "city": "LOS ANGELES", "state": "CA", "pop": 15000000},
    {"_id": "30280", "city": "CHICAGO", "state": "IL", "pop": 8000000}
])

// 1. Return states with populations above 10 million
db.zipcode.aggregate([
    {$group: {_id: "$state", totalPop: {$sum: "$pop"}}},
    {$match: {totalPop: {$gt: 10000000}}}
])

// 2. Display department-wise average salary
db.Teachers.aggregate([
    {$group: {_id: "$dname", avgSalary: {$avg: "$salary"}}}
])

// 3. Display number of employees in each department
db.Teachers.aggregate([
    {$group: {_id: "$dname", count: {$sum: 1}}}
])

// 4. Display department-wise total salary for departments with total salary >= 50000
db.Teachers.aggregate([
    {$group: {_id: "$dname", totalSalary: {$sum: "$salary"}}},
    {$match: {totalSalary: {$gte: 50000}}}
])

// 5. Queries using different aggregate operators
// Max salary
db.Teachers.aggregate([{$group: {_id: null, maxSalary: {$max: "$salary"}}}])

// Min salary
db.Teachers.aggregate([{$group: {_id: null, minSalary: {$min: "$salary"}}}])

// Count documents
db.Teachers.aggregate([{$group: {_id: null, count: {$sum: 1}}}])

// 6. Create simple index on roll_no field in Students
db.Students.createIndex({roll_no: 1})

// 7. Create unique index on Thame field in Teachers
db.Teachers.createIndex({Thame: 1}, {unique: true})

// 8. Create compound index on dname and salary in Teachers
db.Teachers.createIndex({dname: 1, salary: 1})

// 9. Show all indexes in PCCOE database
db.getCollectionNames().forEach(function(coll) {
    print("Indexes for " + coll + ":");
    printjson(db[coll].getIndexes());
});

// 10. Show indexes in Teachers and Students collections
db.Teachers.getIndexes()
db.Students.getIndexes()

-----------------------------------Assignment 10

// 1. Create sample data for Orders collection
db.Orders.insertMany([
    {_id: ObjectId("50a8240b927d5d8b5891743c"), cust_id: "abc123", status: 'A', price: 25},
    {_id: ObjectId("50a8240b927d5d8b5891743d"), cust_id: "abc123", status: 'B', price: 50},
    {_id: ObjectId("50a8240b927d5d8b5891743e"), cust_id: "xyz456", status: 'A', price: 75},
    {_id: ObjectId("50a8240b927d5d8b5891743f"), cust_id: "xyz456", status: 'A', price: 100},
    {_id: ObjectId("50a8240b927d5d8b58917440"), cust_id: "def789", status: 'C', price: 30}
]);

// Create sample data for Employees collection
db.Employees.insertMany([
    {_id: 1, name: "John", department: "Computer", salary: 50000},
    {_id: 2, name: "Jane", department: "Computer", salary: 60000},
    {_id: 3, name: "Bob", department: "HR", salary: 45000},
    {_id: 4, name: "Alice", department: "Finance", salary: 55000},
    {_id: 5, name: "Charlie", department: "Computer", salary: 70000}
]);

// Create sample data for zipcode collection
db.zipcode.insertMany([
    {"_id": "10280", "city": "NEW YORK", "state": "NY", "pop": 5574},
    {"_id": "10281", "city": "ALBANY", "state": "NY", "pop": 12000},
    {"_id": "10282", "city": "BUFFALO", "state": "NY", "pop": 8500},
    {"_id": "20280", "city": "LOS ANGELES", "state": "CA", "pop": 15000000},
    {"_id": "30280", "city": "CHICAGO", "state": "IL", "pop": 8000000}
]);

// 1. Display the salary of employees department-wise using Map-Reduce
var mapFunction1 = function() {
    emit(this.department, this.salary);
};

var reduceFunction1 = function(key, values) {
    return {salaries: values};
};

db.Employees.mapReduce(
    mapFunction1,
    reduceFunction1,
    {
        out: "department_salaries"
    }
);

// Query the results
db.department_salaries.find().pretty();

// 2. Display the count of employees department-wise using Map-Reduce
var mapFunction2 = function() {
    emit(this.department, 1);
};

var reduceFunction2 = function(key, values) {
    return Array.sum(values);
};

db.Employees.mapReduce(
    mapFunction2,
    reduceFunction2,
    {
        out: "department_counts"
    }
);

// Query the results
db.department_counts.find().pretty();

// 3. Return the total price per customer using Map-Reduce
var mapFunction3 = function() {
    emit(this.cust_id, this.price);
};

var reduceFunction3 = function(key, values) {
    return Array.sum(values);
};

db.Orders.mapReduce(
    mapFunction3,
    reduceFunction3,
    {
        out: "customer_totals"
    }
);

// Query the results
db.customer_totals.find().pretty();

// 4. Display the total salary of employees working in computer department using Map-Reduce
var mapFunction4 = function() {
    if (this.department == "Computer") {
        emit(this.department, this.salary);
    }
};

var reduceFunction4 = function(key, values) {
    return Array.sum(values);
};

db.Employees.mapReduce(
    mapFunction4,
    reduceFunction4,
    {
        out: "computer_dept_salary"
    }
);

// Query the results
db.computer_dept_salary.find().pretty();

// 5. Return the city-wise population of the cities in NY state using Map-Reduce
var mapFunction5 = function() {
    if (this.state == "NY") {
        emit(this.city, this.pop);
    }
};

var reduceFunction5 = function(key, values) {
    return Array.sum(values);
};

db.zipcode.mapReduce(
    mapFunction5,
    reduceFunction5,
    {
        out: "ny_city_populations"
    }
);

// Query the results
db.ny_city_populations.find().pretty();